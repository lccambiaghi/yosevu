#+OPTIONS: num:nil toc:nil \n:nil author:nil date:nil title:nil

* New website!
:PROPERTIES:
:EXPORT_FILE_NAME: src/posts/new-website.md
:END:
title: New website!
subtitle: Why and how I set up my personal website
date: 2020-05-28
id: new-website
tags: clojurescript shadow-cljs org

** The problem
I have always wanted a personal website. I have attempted several times at creating one.
The first function a personal website should serve is showcase your achievements, e.g. your former experience and projects.
The second function I have always seeked from my website is technical blogging.
Moreover, I wanted my website to be hosted for free, without any limitations.

In regards to blogging, I wanted to do it in the simplest way. Not too simple though, as Einstein said:
#+BEGIN_QUOTE
Everything should be made as simple as possible,
but not any simpler ---Albert Einstein
#+END_QUOTE
In my previous attempts at building a website I never reached that sweet spot: things were either too complex or too simple.
In this blog post I explain what brought me to this point.

** Previous approaches
A popular approach is to host a static website on Github Pages with Ruby+Jekyll.
Github recently made this very easy with the [[https://github.com/github/personal-website][personal website project]].
I tried twice that approach because of how easy and fast it is to set up.

The first time I set up a simple website was few years ago and I did it with a minimal Jekyll template to showcase my github projects and my skills.
I had a page where I could easily write blog posts in ~.md~ files, placing the posts in a certain folder structure with a certain filename.
Simple enough, right? Maybe too simple. I could not easily control the website template. I had to write my posts in ~markdown~ files.
I quickly lost interest in the website and never blogged once.

The second time around was at the beginning of 2020, shortly after discovering Emacs.
I saw a beautiful blog online and made it a day's quest to replicate it on my ~gh-pages~ branch.
What the author was using was an R library called ~rmarkdown~, which under the hood uses ~knitr~ + ~pandoc~ to render ~.Rmd~ files.
The final touch I added was so I could write posts using my favourite markup language, i.e. Org Mode.
I could write ~.org~ files, export them to ~.Rmd~ files and finally render them with ~rmarkdown~.
The website's style was stunning also! Very easy to steal some CSS from his website.

I could blog writing ~.org~ files and I had a beautiful website.. Still I never blogged once. Maybe it was not simple enough.
The setup must have been working very well for its original author, a Data Scientist writing a lot of ~.Rmd~ analyses. Not so much for me.

** This approach
Lately I have been very fascinated by the Clojure programming language. I will write a post in the future about it.
In the websites I am lurking, the community often speaks about Clojurescript which can compile to Javascript code.
Some of the ~cljs~ frameworks for simple-page applications seem simple and elegant (like most things Clojure related).

Today I found a minimal, beautiful blog set up with ~shadow-cljs~, which had very little code, all of which was understandable enough.
It looks like the author is a ~js~ and ~cljs~ developer, so it has been interesting to learn some best practices since I have absolutely zero knowledge of frontend development.

Well, I forked his repo and it was extremely quick to build the website locally and deploy it to netlify!
New concepts I need to understand more:
- ~yarn~ > ~npm~ for managing dependencies, building and releasing
- ~tailwind~ + ~postcss~ for easy customization of your website's style
- ~yarn shadow-cljs watch app~ to develop while hot-reloading the website a-la-figwheel
- Connecting to the ~clojurescript~ REPL to interact with the browser

This is a very exciting environment to develop my website and customize it to my liking! No more deciphering templates and stealing off CSS, I will customize it how I want.

The second news, even more exciting, is that the author wrote a simple logic to parse ~.md~ and populate the website.
This means that to write my blog posts I can write with Org Mode and easily export to ~.md~.
I will also adopt the approach used in ~ox-hugo~, that is to have a single ~.org~ file and have posts live under a heading.
I can then export a single post with =,e C-s mm=, i.e. calling ~org-export-dispatch~, narrowing the scope to the subtree and exporting to a markdown file.

I really like having the full control over the website. Deploying to netlify means that I am not limited to what Github Pages lets me do.
In the future I would like to explore different things, like embedding an interactive ~D3~ visualization or a ~vega-lite~ SVG.
I am happy to *need* to understand the details for these integrations instead of resorting to a magical plugin in an obscure template (like with ~hugo~).

** Why blogging?
Technical blogging is a great opportunity to learn how to explain something you _think_ you know something about and how to organise your thoughts.
Before writing this post I thought I had a clear idea of what to write but at the end of the post I can see that I digressed and I could have benefitted from organizing the structure of the post beforehand.
It's okay since it is my first post, but see? Already learning!

In the future I plan to write about the things I deem interesting that I am exploring.
I do this for self documentation and to maybe help a fellow user who might come across the same problem I was solving and maybe it will help him save some time.
I will adjust with time around a certain size and type of content. I expect the two main categories will be data science and software engineering tooling.
* Vega-lite in Clojure
:PROPERTIES:
:EXPORT_FILE_NAME: ../src/posts/vega-lite-clj.md
:END:
title: Vega-lite in Clojure
subtitle: How to write visualizations as code
date: 2020-06-2
id: vega-lite-clj
tags: vega-lite clojure

** Discovering Vega-lite
I am in the middle of my journey discovering Clojure and its ecosystem of libraries.
So far I have explored quite thoroughly the areas of Data Science (most notable mention: ~tech.ml.dataset~) and R/Python interoperability (mentions: ~libpython-clj~ and ~clojisr~).
The incredible developers behind these libraries often discuss about data visualization and they seem fond of one "framework" in particular, and that is Vega-Lite.

Of course, there is a particularly popular Clojure library for manipulating visualizations and that is ~Oz~.
Out of curiousity, I have watched the canonical [[https://www.youtube.com/watch?v=9uaHRWj04D4][introductory video]] to Vega-Lite and I was really amazed by its simplicity and power of expression.
In brief:
- Vega is designed by following guidelines outlined in the Grammar of Graphics
- Vega is built "on top" of ~d3.js~
- Vega-lite is a "lighter" version of Vega, less verbose and with "sane defaults"

After reading about it and experimenting with it, I understand why the smart people of the Clojure community are fascinated by this library.
Consider this plot:
#+BEGIN_EXPORT html
<div> <svg class="marks" width="350" height="247" viewBox="0 0 350 247" style="background-color: white;"><defs><style>.vega-svg-root * { fill: none; } .vega-svg-root tspan { fill: inherit; } .vega-svg-root path { stroke-miterlimit: 10; }</style></defs><g class="vega-svg-root" transform="translate(44,10)"><g class="mark-group role-frame root" role="graphics-object" aria-roledescription="group mark container"><g transform="translate(0,0)"><path class="background" aria-hidden="true" d="M0.5,0.5h300v200h-300Z" style="fill: transparent; stroke: rgb(221, 221, 221);"></path><g><g class="mark-group role-axis" aria-hidden="true"><g transform="translate(0.5,0.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" style="pointer-events: none;"></path><g><g class="mark-rule role-axis-grid" style="pointer-events: none;"><line transform="translate(0,200)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,150)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,100)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,50)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,0)" x2="300" y2="0" style="stroke: rgb(221, 221, 221); stroke-width: 1px; opacity: 1;"></line></g></g><path class="foreground" aria-hidden="true" d="" style="pointer-events: none; display: none;"></path></g></g><g class="mark-group role-axis" role="graphics-symbol" aria-roledescription="axis" aria-label="X-axis titled 'Day' for a discrete scale with 15 values: 1, 2, 3, 4, 5, ending with 15"><g transform="translate(0.5,200.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" style="pointer-events: none;"></path><g><g class="mark-rule role-axis-tick" style="pointer-events: none;"><line transform="translate(10,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(30,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(50,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(70,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(90,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(110,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(130,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(150,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(170,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(190,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(210,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(230,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(250,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(270,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(290,0)" x2="0" y2="5" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line></g><g class="mark-text role-axis-label" style="pointer-events: none;"><text text-anchor="middle" transform="translate(9.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">1</text><text text-anchor="middle" transform="translate(29.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">2</text><text text-anchor="middle" transform="translate(49.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">3</text><text text-anchor="middle" transform="translate(69.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">4</text><text text-anchor="middle" transform="translate(89.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">5</text><text text-anchor="middle" transform="translate(109.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">6</text><text text-anchor="middle" transform="translate(129.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">7</text><text text-anchor="middle" transform="translate(149.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">8</text><text text-anchor="middle" transform="translate(169.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">9</text><text text-anchor="middle" transform="translate(189.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">10</text><text text-anchor="middle" transform="translate(209.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">11</text><text text-anchor="middle" transform="translate(229.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">12</text><text text-anchor="middle" transform="translate(249.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">13</text><text text-anchor="middle" transform="translate(269.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">14</text><text text-anchor="middle" transform="translate(289.5,15)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">15</text></g><g class="mark-rule role-axis-domain" style="pointer-events: none;"><line transform="translate(0,0)" x2="300" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line></g><g class="mark-text role-axis-title" style="pointer-events: none;"><text text-anchor="middle" transform="translate(150,30)" style="font-family: sans-serif; font-size: 11px; font-weight: bold; fill: rgb(0, 0, 0); opacity: 1;">Day</text></g></g><path class="foreground" aria-hidden="true" d="" style="pointer-events: none; display: none;"></path></g></g><g class="mark-group role-axis" role="graphics-symbol" aria-roledescription="axis" aria-label="Y-axis titled 'PM2.5 Value' for a linear scale with values from 0 to 400"><g transform="translate(0.5,0.5)"><path class="background" aria-hidden="true" d="M0,0h0v0h0Z" style="pointer-events: none;"></path><g><g class="mark-rule role-axis-tick" style="pointer-events: none;"><line transform="translate(0,200)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,150)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,100)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,50)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line><line transform="translate(0,0)" x2="-5" y2="0" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line></g><g class="mark-text role-axis-label" style="pointer-events: none;"><text text-anchor="end" transform="translate(-7,203)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">0</text><text text-anchor="end" transform="translate(-7,153)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">100</text><text text-anchor="end" transform="translate(-7,103)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">200</text><text text-anchor="end" transform="translate(-7,53)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">300</text><text text-anchor="end" transform="translate(-7,3)" style="font-family: sans-serif; font-size: 10px; fill: rgb(0, 0, 0); opacity: 1;">400</text></g><g class="mark-rule role-axis-domain" style="pointer-events: none;"><line transform="translate(0,200)" x2="0" y2="-200" style="stroke: rgb(136, 136, 136); stroke-width: 1px; opacity: 1;"></line></g><g class="mark-text role-axis-title" style="pointer-events: none;"><text text-anchor="middle" transform="translate(-27.701492309570312,100) rotate(-90) translate(0,-2)" style="font-family: sans-serif; font-size: 11px; font-weight: bold; fill: rgb(0, 0, 0); opacity: 1;">PM2.5 Value</text></g></g><path class="foreground" aria-hidden="true" d="" style="pointer-events: none; display: none;"></path></g></g><g class="mark-rect role-mark layer_0_layer_0_marks" role="graphics-object" aria-roledescription="rect mark container"><path aria-label="Day: 1; Value: 54.8" role="graphics-symbol" aria-roledescription="bar" d="M1,172.6h18v27.400000000000006h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 2; Value: 112.1" role="graphics-symbol" aria-roledescription="bar" d="M21,143.95h18v56.05000000000001h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 3; Value: 63.6" role="graphics-symbol" aria-roledescription="bar" d="M41,168.2h18v31.80000000000001h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 4; Value: 37.6" role="graphics-symbol" aria-roledescription="bar" d="M61,181.20000000000002h18v18.799999999999983h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 5; Value: 79.7" role="graphics-symbol" aria-roledescription="bar" d="M81,160.15h18v39.849999999999994h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 6; Value: 137.9" role="graphics-symbol" aria-roledescription="bar" d="M101,131.05h18v68.94999999999999h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 7; Value: 120.1" role="graphics-symbol" aria-roledescription="bar" d="M121,139.95000000000002h18v60.04999999999998h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 8; Value: 103.3" role="graphics-symbol" aria-roledescription="bar" d="M141,148.35h18v51.650000000000006h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 9; Value: 394.8" role="graphics-symbol" aria-roledescription="bar" d="M161,2.6000000000000023h18v197.4h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 10; Value: 199.5" role="graphics-symbol" aria-roledescription="bar" d="M181,100.25h18v99.75h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 11; Value: 72.3" role="graphics-symbol" aria-roledescription="bar" d="M201,163.85h18v36.150000000000006h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 12; Value: 51.1" role="graphics-symbol" aria-roledescription="bar" d="M221,174.45h18v25.55000000000001h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 13; Value: 112" role="graphics-symbol" aria-roledescription="bar" d="M241,144h18v56h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 14; Value: 174.5" role="graphics-symbol" aria-roledescription="bar" d="M261,112.75h18v87.25h-18Z" style="fill: rgb(76, 120, 168);"></path><path aria-label="Day: 15; Value: 130.5" role="graphics-symbol" aria-roledescription="bar" d="M281,134.75h18v65.25h-18Z" style="fill: rgb(76, 120, 168);"></path></g><g class="mark-rect role-mark layer_0_layer_1_marks" role="graphics-object" aria-roledescription="rect mark container"><path aria-label="Day: 9; PM2.5 Value: 300; Value: 394.8" role="graphics-symbol" aria-roledescription="bar" d="M161,2.6000000000000023h18v47.4h-18Z" style="fill: rgb(228, 87, 85);"></path></g><g class="mark-rule role-mark layer_1_layer_0_marks" role="graphics-symbol" aria-roledescription="rule mark container"><line transform="translate(300,50)" x2="-300" y2="0" style="stroke: black;"></line></g><g class="mark-text role-mark layer_1_layer_1_marks" role="graphics-object" aria-roledescription="text mark container"><text text-anchor="end" transform="translate(298,46)" style="font-family: sans-serif; font-size: 11px; fill: black;">hazardous</text></g></g><path class="foreground" aria-hidden="true" d="" style="display: none;"></path></g></g></g></svg> </div>
#+END_EXPORT

This is the plot specification, described in JSON:
#+BEGIN_SRC json
{
  "$schema": "https://vega.github.io/schema/vega-lite/v4.json",
  "description": "The PM2.5 value of Beijing observed 15 days, highlighting the days when PM2.5 level is hazardous to human health. Data source https://chartaccent.github.io/chartaccent.html",
    "layer": [{
      "data": {
        "values": [
          {"Day": 1, "Value": 54.8},
          {"Day": 2, "Value": 112.1},
          {"Day": 3, "Value": 63.6},
          {"Day": 4, "Value": 37.6},
          {"Day": 5, "Value": 79.7},
          {"Day": 6, "Value": 137.9},
          {"Day": 7, "Value": 120.1},
          {"Day": 8, "Value": 103.3},
          {"Day": 9, "Value": 394.8},
          {"Day": 10, "Value": 199.5},
          {"Day": 11, "Value": 72.3},
          {"Day": 12, "Value": 51.1},
          {"Day": 13, "Value": 112.0},
          {"Day": 14, "Value": 174.5},
          {"Day": 15, "Value": 130.5}
        ]
      },
      "layer": [{
        "mark": "bar",
        "encoding": {
          "x": {"field": "Day", "type": "ordinal", "axis": {"labelAngle": 0}},
          "y": {"field": "Value", "type": "quantitative"}
        }
      }, {
        "mark": "bar",
        "transform": [
          {"filter": "datum.Value >= 300"},
          {"calculate": "300", "as": "baseline"}
        ],
        "encoding": {
          "x": {"field": "Day", "type": "ordinal"},
          "y": {"field": "baseline", "type": "quantitative", "title": "PM2.5 Value"},
          "y2": {"field": "Value"},
          "color": {"value": "#e45755"}
        }
      }
    ]}, {
      "data": {
         "values": [{}]
      },
      "encoding": {
        "y": {"datum": 300}
      },
      "layer": [{
        "mark": "rule"
      }, {
        "mark": {
          "type": "text",
          "align": "right",
          "baseline": "bottom",
          "dx": -2,
          "dy": -2,
          "x": "width",
          "text": "hazardous"
        }
      }]
    }
  ]
}
#+END_SRC

It is not the simplest example but I think it speaks great of Vega-Lite expressiveness.
The visualization is divided in two layers and each layer has two sublayers:
- The first layer has simple data associated with it, with the fields "Day" and "Value"
  - The first sublayer has a mark specifying a "bar" plot
  - The field "Day" is encoded to the x axis and "Value" to the y axis
  - The second sublayer is another bar mark with defines transforms:
    - Data below 300 is filtered and 300 is defined as baseline
    - In the encoding there is y, which is the defined baseline
    - There is also y2, which is the values above 300 that we filtered, colored of red
- The second layer has no data but a fixed y encoding to 300
  - The first sublayer has mark "rule", which draws an horizontal line in y
  - The second sublayer has mark "text" and the options describe positioning

I really like this way of composing a visualization.
It is very simple to express the components and quite intuitive how to layer them together.

** Oz
Well, Vega-lite is nothing new, might not be so exciting for the majority of people.
What makes it extremely interesting for me is that it has something in common with Clojure: this visualization spec is just data.
Instead of JSON, it can be represented in YAML or EDN. In fact, it's nothing more than a map of vectors and maps.

The library called ~Oz~ allows us to define a Vega-Lite spec in Clojure, it compiles it to vega and renders it in a browser with minimal effort.
It even allows us to export the plot to a self-contained HTML using the javascript library ~vega-embed~.

Consider this neat code found in the repo's README:
#+BEGIN_SRC clojure
(ns org.core
  (:require [oz.core :as oz]))

(defn play-data [& names]
  (for [n names
        i (range 20)]
    {:time i :item n :quantity (+ (Math/pow (* i (count n)) 0.8) (rand-int (count n)))}))

(def line-plot
  {:data     {:values (play-data "monkey" "slipper" "broom")}
   :encoding {:x     {:field "time" :type "quantitative"}
              :y     {:field "quantity" :type "quantitative"}
              :color {:field "item" :type "nominal"}}
   :mark     "line"})

(oz/export! line-plot "public/html/line.html")
#+END_SRC

&nbsp; &nbsp;

Here 3 random time series are generated, encoded in the most obvious, concise, simple way and the result is what you would expect:
#+BEGIN_EXPORT html
<iframe src="html/line.html" style="overflow:visible;min-height:300px;height:100%;width:100%;padding:20px" scrolling="no" border="none" width="100%" height="100%" marginheight="0" frameborder="0"></iframe>
#+END_EXPORT

What I love about this example is that you work with raw, naked data.
There is no class, no weird API syntax or function kwargs to memorize.

** Blog development:
Anoter interesting learning I had was how to embed Vega into this blog!
Because I don't know enough about web development, it took me way more than it should have.
Actually, it was really easy since you can just write plain HTML in markdown and that will be correctly parsed by ~markdown.core~ and ~reagent~.

When taking a compiled Vega spec, I can just put the SVG in a div tag.
When exporting it from Clojure, I can put the HTML file in an iframe.
It is just a bit annoying that this does not resize automatically but I can control it with the CSS attribute ~min-height~ and set it to the height I specify in Vega-lite.

Oz also has a facility to render a Reagent component directly from Clojure.
At the moment I am not using it as my blog posts are written in markdown/HTML, I could use it to populate another page of the website.

As a final cherry on top, writing my blog in Org mode has already shown its value.
Executing ~yarn develop~ starts the ~shadow-cljs~ server which will watch for changed files.
At the same time it will expose a Clojure REPL that I can connect to in order to execute my org src blocks.
When I am satisfied, I can just export to markdown and see the blog post reloading.

#+BEGIN_EXPORT html
<div id="hyvor-talk-view" class="container mx-auto"></div> <script type="text/javascript"> var HYVOR_TALK_WEBSITE = 793; var HYVOR_TALK_CONFIG = {url: https://cambiaghi.me/vega-lite-clj, id: vega-lite-clj}; </script> <script async type="text/javascript" src="//talk.hyvor.com/web-api/embed"></script>
#+END_EXPORT
